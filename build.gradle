plugins {
  id 'com.diffplug.spotless' version '6.25.0'
}
repositories {
  mavenLocal()
  mavenCentral()
}
spotless {
  format 'json', {
    target '*.json','**/*.json','*.json5','**/*.json5'
    prettier().configFile("${rootProject.projectDir}/.prettierrc.json5")
  }
  flexmark {
    target '**/*.md'
    flexmark()
  }
}

allprojects {

  apply plugin: "java"
  apply plugin: "eclipse"
  apply plugin: 'maven-publish'
  apply plugin: "com.diffplug.spotless"
  version '1.0'
  spotless {
    groovyGradle {
      target '*.gradle'
      greclipse().configFile("${rootProject.projectDir}/greclipse.properties")
    }
    java {
      eclipse()
          .configFile("${rootProject.projectDir}/eclipse-prefs.xml")
      //    .sortMembersEnabled(true)
      //    .sortMembersVisibilityOrderEnabled(true)
      licenseHeader '/* (C) $YEAR */'
    }
  }
  repositories {
    mavenLocal()
    mavenCentral()
  }
  dependencies{
  }
  java{
    targetCompatibility = JavaVersion.VERSION_17
    sourceCompatibility = JavaVersion.VERSION_17
  }

  task dist(type: Jar, dependsOn: configurations.runtimeClasspath){
    from files(sourceSets.main.output.classesDirs)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }}
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName = "${project.name}.jar"

    manifest{
      //attributes 'Main-Class': project.mainClassName
    }
    doLast{
      copy {
        from archiveFile.get()
        into file("$rootDir/dist")
      }
    }
  }
  tasks.withType(JavaCompile){
    options.compilerArgs+="-parameters"
  }
}
project(":core"){
  apply plugin: "java-library"
  ext{
  }
  dependencies{
  }
}
project(":test"){
  ext{
    mindustryVersion = 'v146'
  }
  dependencies{
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"

    implementation project(":core")
  }
}
